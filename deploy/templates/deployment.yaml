apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app.kubernetes.io/name: {{ .Values.AppName }}
    app.kubernetes.io/part-of: {{ .Values.AppPartOf }}
    app.kubernetes.io/component: {{ .Values.AppComponent }}
spec:
  replicas: {{ .Values.Deployment.Replica }}
  revisionHistoryLimit: 0
  strategy:
    type: {{ .Values.Deployment.Strategy }}
  selector:
    matchLabels:
      pod: {{ .Release.Name }}
  template:
    # A partir d'ici, c'est une d√©finition de pod
    metadata:
      labels:
        pod: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Values.AppName }}
        app.kubernetes.io/part-of: {{ .Values.AppPartOf }}
        app.kubernetes.io/component: {{ .Values.AppComponent }}

    spec:
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.Deployment.Image.repository }}:{{ .Values.Deployment.Image.tag }}"
          imagePullPolicy: IfNotPresent
          {{ if .Values.PhpScript }}
          command: [ "/usr/local/bin/php" , "-f", "{{ .Values.PhpScript }}" ]
          {{ end }}
          {{ if .Values.Ingress.EnablePhpFpm }}
          ports:
            - name: fastcgi
              containerPort: 9000
              protocol: TCP
          {{ end }}
          {{ if .Values.Deployment.Resources.Enable }}
          resources:
            requests:
              cpu: {{ .Values.Deployment.Resources.Requests.Cpu }}
              memory: {{ .Values.Deployment.Resources.Requests.Memory }}
            limits:
              {{ if .Values.Deployment.Resources.Limits.Cpu }}
              cpu: {{ .Values.Deployment.Resources.Limits.Cpu }}
              {{ end }}
              memory: {{ .Values.Deployment.Resources.Limits.Memory }}
          {{ end }}
          {{ if .Values.Ingress.EnablePhpFpm }}
          {{ if .Values.Deployment.Monitoring }}
          livenessProbe:
            tcpSocket:
              port: 9000
          readinessProbe:
            tcpSocket:
              port: 9000
          {{ end }}
          {{ end }}
          {{ if (.Values.Deployment.Env.plain) }}
          env:
          {{ range $envName, $envValue := .Values.Deployment.Env.plain }}
            - name: {{ $envName | quote}}
              value: {{ $envValue | quote}}
          {{ end }}
          {{ end }}
          {{ if (.Values.Deployment.Env.secret) }}
          {{ range $envName, $secret := .Values.Deployment.Env.secret }}
            - name: {{ $envName | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $secret.key }}
          {{ end }}
          {{ end }}
          volumeMounts:
          {{ if .Values.Nfs.MountSource }}
          - name: {{ .Release.Name }}-source
            mountPath: /work
            subPath: {{ .Values.Nfs.Path }}
          {{ end }}
      volumes:
        {{ if .Values.Nfs.MountSource }}
        - name: {{ .Release.Name }}-source
          nfs:
            server: {{ .Values.Nfs.Server }}
            path: {{ .Values.Nfs.Export }}
        {{ end }}
